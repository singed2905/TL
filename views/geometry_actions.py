# geometry_actions.py
import tkinter as tk
from shlex import shlex
from tkinter import messagebox, filedialog, ttk
import os
from datetime import datetime


class GeometryActions:
    def __init__(self, view, controller):
        self.view = view
        self.controller = controller

    # === X·ª¨ L√ù NH√ìM A ===
    def _thuc_thi_A(self):
        """Process group A data"""
        try:
            # Update controller state
            self.controller.set_current_shapes(
                self.view.dropdown1_var.get(),
                self.view.dropdown2_var.get()
            )
            self.controller.set_kich_thuoc(
                self.view.kich_thuoc_A_var.get(),
                self.view.kich_thuoc_B_var.get()
            )

            # Collect data from UI
            data_dict = self._get_group_A_data()

            # Process data through controller
            result = self.controller.thuc_thi_A(data_dict)

            # Update UI with results
            self._update_group_A_results(result)

        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói x·ª≠ l√Ω nh√≥m A: {str(e)}")

    # === X·ª¨ L√ù NH√ìM B ===
    def _thuc_thi_B(self):
        """Process group B data"""
        try:
            if self.view.pheptoan_var.get() in ["Di·ªán t√≠ch", "Th·ªÉ t√≠ch"]:
                return

            # Update controller state
            self.controller.set_current_shapes(
                self.view.dropdown1_var.get(),
                self.view.dropdown2_var.get()
            )
            self.controller.set_kich_thuoc(
                self.view.kich_thuoc_A_var.get(),
                self.view.kich_thuoc_B_var.get()
            )

            # Collect data from UI
            data_dict = self._get_group_B_data()

            # Process data through controller
            result = self.controller.thuc_thi_B(data_dict)

            # Update UI with results
            self._update_group_B_results(result)

        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói x·ª≠ l√Ω nh√≥m B: {str(e)}")

    # === X·ª¨ L√ù T·∫§T C·∫¢ ===
    def _thuc_thi_tat_ca(self):
        """Process all groups and generate result"""
        try:
            # Update controller state
            self.controller.set_current_shapes(
                self.view.dropdown1_var.get(),
                self.view.dropdown2_var.get()
            )
            self.controller.set_kich_thuoc(
                self.view.kich_thuoc_A_var.get(),
                self.view.kich_thuoc_B_var.get()
            )
            self.controller.current_operation = self.view.pheptoan_var.get()

            # Process all data
            data_dict_A = self._get_group_A_data()
            data_dict_B = self._get_group_B_data() if self.view.pheptoan_var.get() not in ["Di·ªán t√≠ch", "Th·ªÉ t√≠ch"] else {}

            self.controller.thuc_thi_tat_ca(data_dict_A, data_dict_B)

            # Generate final result
            result = self.controller.generate_final_result()
            self.view.update_final_result_display(result)

        except Exception as e:
            error_msg = f"L·ªói x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}"
            self.view.update_final_result_display(error_msg)
            messagebox.showerror("L·ªói x·ª≠ l√Ω", error_msg)

    # === IMPORT/EXPORT ===
    def _import_from_excel(self):
        """Import data from Excel file ho·∫∑c import file kh√°c"""
        try:
            # N·∫øu ƒëang trong ch·∫ø ƒë·ªô import, cho ph√©p import file kh√°c
            if self.view.imported_data:
                response = messagebox.askyesno("Import file kh√°c",
                                               "B·∫°n c√≥ mu·ªën import file Excel kh√°c? D·ªØ li·ªáu c≈© s·∫Ω b·ªã thay th·∫ø.")
                if not response:
                    return

            # M·ªü h·ªôp tho·∫°i ch·ªçn file
            file_path = filedialog.askopenfilename(
                title="Ch·ªçn file Excel ƒë·ªÉ import",
                filetypes=[("Excel files", "*.xlsx *.xls"), ("All files", "*.*")]
            )

            if not file_path:
                return

            # ƒê√°nh d·∫•u ƒë√£ import
            self.view.imported_data = True

            # Kh√≥a t·∫•t c·∫£ c√°c √¥ nh·∫≠p li·ªáu
            self._lock_all_input_entries()

            # Hi·ªán n√∫t cho ch·∫ø ƒë·ªô import
            self.view._show_import_buttons()

            # ·∫®n n√∫t Import Excel ban ƒë·∫ßu
            self.view.btn_import_excel.grid_remove()

            self.view.imported_file_path = file_path

            # HI·ªÇN TH·ªä T√äN FILE EXCEL TRONG √î K·∫æT QU·∫¢ T·ªîNG
            file_name = os.path.basename(file_path)
            self.view.update_final_result_display(f"üìÅ ƒê√£ import file: {file_name}")

            print(f"ƒê√£ import file: {file_path}")

        except Exception as e:
            error_msg = f"‚ùå L·ªói import: {str(e)}"
            self.view.update_final_result_display(error_msg)
            messagebox.showerror("L·ªói Import", f"Kh√¥ng th·ªÉ import file Excel:\n{str(e)}")

    def _export_to_excel(self):
        """Export data to Excel v·ªõi h·ªôp tho·∫°i ch·ªçn n∆°i l∆∞u"""
        try:
            # Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t kh√¥ng
            export_info = self.controller.get_export_info()

            if not export_info['has_data_A']:
                response = messagebox.askyesno(
                    "X√°c nh·∫≠n",
                    "Ch∆∞a c√≥ d·ªØ li·ªáu nh√≥m A. B·∫°n c√≥ mu·ªën xu·∫•t file v·ªõi d·ªØ li·ªáu hi·ªán t·∫°i kh√¥ng?"
                )
                if not response:
                    return

            # X·ª≠ l√Ω t·∫•t c·∫£ d·ªØ li·ªáu tr∆∞·ªõc ƒë·ªÉ c√≥ k·∫øt qu·∫£ m·ªõi nh·∫•t
            self._thuc_thi_tat_ca()

            # HI·ªÇN TH·ªä H·ªòP THO·∫†I CH·ªåN N∆†I L∆ØU FILE
            file_path = filedialog.asksaveasfilename(
                defaultextension=".xlsx",
                filetypes=[
                    ("Excel files", "*.xlsx"),
                    ("All files", "*.*")
                ],
                title="Ch·ªçn n∆°i l∆∞u file Excel",
                initialfile=f"geometry_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            )

            # N·∫øu ng∆∞·ªùi d√πng h·ªßy b·ªè
            if not file_path:
                return

            # Xu·∫•t ra Excel v·ªõi ƒë∆∞·ªùng d·∫´n ƒë√£ ch·ªçn
            filename = self.controller.export_to_excel(file_path)

            # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t file Excel th√†nh c√¥ng!\n\nFile: {os.path.basename(filename)}")

            # C·∫≠p nh·∫≠t √¥ hi·ªÉn th·ªã k·∫øt qu·∫£
            self.view.update_final_result_display(f"üìÅ ƒê√£ xu·∫•t file: {os.path.basename(filename)}")

        except Exception as e:
            error_msg = f"‚ùå L·ªói xu·∫•t file: {str(e)}"
            self.view.update_final_result_display(error_msg)
            if "openpyxl" in str(e):
                error_msg += "\n\nVui l√≤ng c√†i ƒë·∫∑t th∆∞ vi·ªán openpyxl:\npip install openpyxl"
            messagebox.showerror("L·ªói xu·∫•t Excel", error_msg)

    def _thuc_thi_import_excel(self):
        """X·ª≠ l√Ω to√†n b·ªô file Excel ƒë√£ import"""
        try:
            if not self.view.imported_file_path:
                messagebox.showerror("L·ªói", "Ch∆∞a import file Excel!")
                return

            if not os.path.exists(self.view.imported_file_path):
                messagebox.showerror("L·ªói", "File Excel kh√¥ng t·ªìn t·∫°i!")
                return

            file_path = filedialog.asksaveasfilename(
                defaultextension=".xlsx",
                filetypes=[("Excel files", "*.xlsx")],
                title="Ch·ªçn n∆°i l∆∞u file k·∫øt qu·∫£",
                initialfile=f"geometry_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            )

            if not file_path:  # Ng∆∞·ªùi d√πng h·ªßy
                return
            start_time = datetime.now()
            print("start time: " +start_time.strftime("%Y-%m-%d %H:%M:%S"))

            # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω
            self.view.update_final_result_display("üîÑ ƒêang x·ª≠ l√Ω file Excel...")
            self.view.window.update()

            # L·∫•y th√¥ng tin t·ª´ UI
            shape_a = self.view.dropdown1_var.get()
            shape_b = self.view.dropdown2_var.get() if self.view.pheptoan_var.get() not in ["Di·ªán t√≠ch", "Th·ªÉ t√≠ch"] else None
            operation = self.view.pheptoan_var.get()
            dimension_a = self.view.kich_thuoc_A_var.get()
            dimension_b = self.view.kich_thuoc_B_var.get()

            # G·ªçi controller x·ª≠ l√Ω batch
            results, output_file, success_count, error_count = self.controller.process_excel_batch(
                self.view.imported_file_path, shape_a, shape_b, operation,
                dimension_a, dimension_b, output_path=file_path  # Truy·ªÅn output_path
            )
            end_time = datetime.now()
            print("end time:" +end_time.strftime("%Y-%m-%d %H:%M:%S"))
            processing_time = end_time - start_time
            processing_seconds = processing_time.total_seconds()
            print(processing_seconds);

            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            result_text = f"‚úÖ ƒê√£ x·ª≠ l√Ω: {success_count} d√≤ng th√†nh c√¥ng, {error_count} d√≤ng l·ªói"
            self.view.update_final_result_display(result_text)

            # Th√¥ng b√°o k·∫øt qu·∫£
            if error_count == 0:
                messagebox.showinfo(
                    "Th√†nh c√¥ng",
                    f"‚úÖ ƒê√É X·ª¨ L√ù TH√ÄNH C√îNG!\n\n"
                    f"‚Ä¢ S·ªë d√≤ng: {success_count} d√≤ng\n"
                    f"‚Ä¢ Th·ªùi gian b·∫Øt ƒë·∫ßu: {start_time.strftime('%H:%M:%S')}\n"
                    f"‚Ä¢ Th·ªùi gian k·∫øt th√∫c: {end_time.strftime('%H:%M:%S')}\n"
                    f"‚Ä¢ T·ªïng th·ªùi gian: {processing_seconds:.2f} gi√¢y\n"
                    f"‚Ä¢ T·ªëc ƒë·ªô: {success_count / processing_seconds:.1f} d√≤ng/gi√¢y\n"
                    f"‚Ä¢ File k·∫øt qu·∫£: {os.path.basename(output_file)}")
            else:
                messagebox.showwarning(
                    "Ho√†n th√†nh v·ªõi l·ªói",
                    f"‚ö†Ô∏è HO√ÄN TH√ÄNH V·ªöI L·ªñI!\n\n"
                    f"‚Ä¢ Th√†nh c√¥ng: {success_count} d√≤ng\n"
                    f"‚Ä¢ L·ªói: {error_count} d√≤ng\n"
                    f"‚Ä¢ Th·ªùi gian b·∫Øt ƒë·∫ßu: {start_time.strftime('%H:%M:%S')}\n"
                    f"‚Ä¢ Th·ªùi gian k·∫øt th√∫c: {end_time.strftime('%H:%M:%S')}\n"
                    f"‚Ä¢ T·ªïng th·ªùi gian: {processing_seconds:.2f} gi√¢y\n"
                    f"‚Ä¢ File k·∫øt qu·∫£: {os.path.basename(output_file)}"
                )

        except Exception as e:
            error_msg = f"‚ùå L·ªói x·ª≠ l√Ω file Excel: {str(e)}"
            self.view.update_final_result_display(error_msg)
            messagebox.showerror("L·ªói x·ª≠ l√Ω", f"Kh√¥ng th·ªÉ x·ª≠ l√Ω file Excel:\n{str(e)}")

    # === QU·∫¢N L√ù TR·∫†NG TH√ÅI IMPORT ===
    def _quit_import_mode(self):
        """Tho√°t kh·ªèi ch·∫ø ƒë·ªô import Excel v√† quay l·∫°i nh·∫≠p li·ªáu th·ªß c√¥ng"""
        try:
            # ƒê·∫∑t l·∫°i tr·∫°ng th√°i import
            self.view.imported_data = False

            # M·ªü kh√≥a t·∫•t c·∫£ c√°c √¥ nh·∫≠p li·ªáu
            self._unlock_all_input_entries()

            # X√≥a d·ªØ li·ªáu import (n·∫øu c·∫ßn)
            self._clear_imported_data()

            # Hi·ªán l·∫°i n√∫t Import Excel
            self.view.btn_import_excel.grid()

            # ·∫®n frame n√∫t import, hi·ªán frame n√∫t th·ªß c√¥ng n·∫øu c√≥ d·ªØ li·ªáu
            self.view.frame_buttons_import.grid_remove()
            if self.view._check_manual_data():
                self.view.frame_buttons_manual.grid()
            else:
                self.view._hide_action_buttons()

            # Hi·ªÉn th·ªã th√¥ng b√°o
            self.view.update_final_result_display("üîô ƒê√£ tho√°t ch·∫ø ƒë·ªô import, quay l·∫°i nh·∫≠p li·ªáu th·ªß c√¥ng")

            print("ƒê√£ tho√°t ch·∫ø ƒë·ªô import Excel, quay l·∫°i nh·∫≠p li·ªáu th·ªß c√¥ng")

        except Exception as e:
            error_msg = f"‚ùå L·ªói tho√°t import: {str(e)}"
            self.view.update_final_result_display(error_msg)
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ tho√°t ch·∫ø ƒë·ªô import: {str(e)}")

    def _lock_all_input_entries(self):
        """Kh√≥a t·∫•t c·∫£ c√°c √¥ nh·∫≠p li·ªáu"""
        entries = self.view._get_all_input_entries()
        for entry in entries:
            entry.config(state='disabled')

    def _unlock_all_input_entries(self):
        """M·ªü kh√≥a t·∫•t c·∫£ c√°c √¥ nh·∫≠p li·ªáu"""
        entries = self.view._get_all_input_entries()
        for entry in entries:
            entry.config(state='normal')

    def _clear_imported_data(self):
        """X√≥a d·ªØ li·ªáu ƒë√£ import (n·∫øu c·∫ßn)"""
        try:
            # Reset d·ªØ li·ªáu trong controller
            self.controller.raw_data_A = {}
            self.controller.raw_data_B = {}

            print("ƒê√£ x√≥a d·ªØ li·ªáu import")
        except Exception as e:
            print(f"L·ªói khi x√≥a d·ªØ li·ªáu import: {str(e)}")

    # === C√ÅC PH∆Ø∆†NG TH·ª®C TR√çCH XU·∫§T D·ªÆ LI·ªÜU ===
    def _get_group_A_data(self):
        """Collect data from group A input fields based on current shape"""
        shape_type = self.view.dropdown1_var.get()
        data_dict = {}

        if shape_type == "ƒêi·ªÉm":
            data_dict['point_input'] = self.view.entry_dau_vao_diem_A.get()

        elif shape_type == "ƒê∆∞·ªùng th·∫≥ng":
            data_dict['line_A1'] = self.view.entry_dau_vao_A1.get()
            data_dict['line_X1'] = self.view.entry_dau_vao_X1.get()

        elif shape_type == "M·∫∑t ph·∫≥ng":
            data_dict['plane_a'] = self.view.entry_N1_in.get()
            data_dict['plane_b'] = self.view.entry_N2_in.get()
            data_dict['plane_c'] = self.view.entry_N3_in.get()
            data_dict['plane_d'] = self.view.entry_N4_in.get()

        elif shape_type == "ƒê∆∞·ªùng tr√≤n":
            data_dict['circle_center'] = self.view.entry_dau_vao_tam_duong_tron_A.get()
            data_dict['circle_radius'] = self.view.entry_dau_vao_ban_kinh_duong_tron_A.get()

        elif shape_type == "M·∫∑t c·∫ßu":
            data_dict['sphere_center'] = self.view.entry_dau_vao_tam_mat_cau_A.get()
            data_dict['sphere_radius'] = self.view.entry_dau_vao_ban_kinh_mat_cau_A.get()

        return data_dict

    def _get_group_B_data(self):
        """Collect data from group B input fields based on current shape"""
        shape_type = self.view.dropdown2_var.get()
        data_dict = {}

        if shape_type == "ƒêi·ªÉm":
            data_dict['point_input'] = self.view.entry_dau_vao_diem_B.get()

        elif shape_type == "ƒê∆∞·ªùng th·∫≥ng":
            data_dict['line_A2'] = self.view.entry_dau_vao_A2.get()
            data_dict['line_X2'] = self.view.entry_dau_vao_X2.get()

        elif shape_type == "M·∫∑t ph·∫≥ng":
            data_dict['plane_a'] = self.view.entry_N5_in.get()
            data_dict['plane_b'] = self.view.entry_N6_in.get()
            data_dict['plane_c'] = self.view.entry_N7_in.get()
            data_dict['plane_d'] = self.view.entry_N8_in.get()

        elif shape_type == "ƒê∆∞·ªùng tr√≤n":
            data_dict['circle_center'] = self.view.entry_dau_vao_tam_duong_tron_B.get()
            data_dict['circle_radius'] = self.view.entry_dau_vao_ban_kinh_duong_tron_B.get()

        elif shape_type == "M·∫∑t c·∫ßu":
            data_dict['sphere_center'] = self.view.entry_dau_vao_tam_mat_cau_B.get()
            data_dict['sphere_radius'] = self.view.entry_dau_vao_ban_kinh_mat_cau_B.get()

        return data_dict

    # === C√ÅC PH∆Ø∆†NG TH·ª®C C·∫¨P NH·∫¨T GIAO DI·ªÜN ===
    def _update_group_A_results(self, result):
        """Update group A result fields in UI"""
        shape_type = self.view.dropdown1_var.get()

        if shape_type == "ƒêi·ªÉm":
            so_chieu = int(self.view.kich_thuoc_A_var.get())
            if so_chieu == 2:
                if len(result) >= 2:
                    self.view.entry_Xd_A.delete(0, tk.END)
                    self.view.entry_Xd_A.insert(0, result[0])
                    self.view.entry_Yd_A.delete(0, tk.END)
                    self.view.entry_Yd_A.insert(0, result[1])
            else:
                if len(result) >= 3:
                    self.view.entry_Xd_A.delete(0, tk.END)
                    self.view.entry_Xd_A.insert(0, result[0])
                    self.view.entry_Yd_A.delete(0, tk.END)
                    self.view.entry_Yd_A.insert(0, result[1])
                    self.view.entry_Zd_A.delete(0, tk.END)
                    self.view.entry_Zd_A.insert(0, result[2])

        elif shape_type == "ƒê∆∞·ªùng th·∫≥ng":
            if len(result) >= 6:
                self.view.entry_A1.delete(0, tk.END)
                self.view.entry_A1.insert(0, result[0])
                self.view.entry_B1.delete(0, tk.END)
                self.view.entry_B1.insert(0, result[1])
                self.view.entry_C1.delete(0, tk.END)
                self.view.entry_C1.insert(0, result[2])
                self.view.entry_X1.delete(0, tk.END)
                self.view.entry_X1.insert(0, result[3])
                self.view.entry_Y1.delete(0, tk.END)
                self.view.entry_Y1.insert(0, result[4])
                self.view.entry_Z1.delete(0, tk.END)
                self.view.entry_Z1.insert(0, result[5])

        elif shape_type == "M·∫∑t ph·∫≥ng":
            if len(result) >= 4:
                self.view.entry_N1_out.config(state='normal')
                self.view.entry_N2_out.config(state='normal')
                self.view.entry_N3_out.config(state='normal')
                self.view.entry_N4_out.config(state='normal')

                self.view.entry_N1_out.delete(0, tk.END)
                self.view.entry_N1_out.insert(0, result[0])
                self.view.entry_N2_out.delete(0, tk.END)
                self.view.entry_N2_out.insert(0, result[1])
                self.view.entry_N3_out.delete(0, tk.END)
                self.view.entry_N3_out.insert(0, result[2])
                self.view.entry_N4_out.delete(0, tk.END)
                self.view.entry_N4_out.insert(0, result[3])

                self.view.entry_N1_out.config(state='readonly')
                self.view.entry_N2_out.config(state='readonly')
                self.view.entry_N3_out.config(state='readonly')
                self.view.entry_N4_out.config(state='readonly')

        elif shape_type == "ƒê∆∞·ªùng tr√≤n":
            if len(result) >= 3:
                self.view.entry_duong_tron_A1.delete(0, tk.END)
                self.view.entry_duong_tron_A1.insert(0, result[0])
                self.view.entry_duong_tron_A2.delete(0, tk.END)
                self.view.entry_duong_tron_A2.insert(0, result[1])
                self.view.entry_duong_tron_A3.delete(0, tk.END)
                self.view.entry_duong_tron_A3.insert(0, result[2])

        elif shape_type == "M·∫∑t c·∫ßu":
            if len(result) >= 4:
                self.view.entry_mat_cau_A1.delete(0, tk.END)
                self.view.entry_mat_cau_A1.insert(0, result[0])
                self.view.entry_mat_cau_A2.delete(0, tk.END)
                self.view.entry_mat_cau_A2.insert(0, result[1])
                self.view.entry_mat_cau_A3.delete(0, tk.END)
                self.view.entry_mat_cau_A3.insert(0, result[2])
                self.view.entry_mat_cau_A4.delete(0, tk.END)
                self.view.entry_mat_cau_A4.insert(0, result[3])

    def _update_group_B_results(self, result):
        """Update group B result fields in UI"""
        shape_type = self.view.dropdown2_var.get()

        if shape_type == "ƒêi·ªÉm":
            so_chieu = int(self.view.kich_thuoc_B_var.get())
            if so_chieu == 2:
                if len(result) >= 2:
                    self.view.entry_Xd_B.delete(0, tk.END)
                    self.view.entry_Xd_B.insert(0, result[0])
                    self.view.entry_Yd_B.delete(0, tk.END)
                    self.view.entry_Yd_B.insert(0, result[1])
            else:
                if len(result) >= 3:
                    self.view.entry_Xd_B.delete(0, tk.END)
                    self.view.entry_Xd_B.insert(0, result[0])
                    self.view.entry_Yd_B.delete(0, tk.END)
                    self.view.entry_Yd_B.insert(0, result[1])
                    self.view.entry_Zd_B.delete(0, tk.END)
                    self.view.entry_Zd_B.insert(0, result[2])

        elif shape_type == "ƒê∆∞·ªùng th·∫≥ng":
            if len(result) >= 6:
                self.view.entry_A2.delete(0, tk.END)
                self.view.entry_A2.insert(0, result[0])
                self.view.entry_B2.delete(0, tk.END)
                self.view.entry_B2.insert(0, result[1])
                self.view.entry_C2.delete(0, tk.END)
                self.view.entry_C2.insert(0, result[2])
                self.view.entry_X2.delete(0, tk.END)
                self.view.entry_X2.insert(0, result[3])
                self.view.entry_Y2.delete(0, tk.END)
                self.view.entry_Y2.insert(0, result[4])
                self.view.entry_Z2.delete(0, tk.END)
                self.view.entry_Z2.insert(0, result[5])

        elif shape_type == "M·∫∑t ph·∫≥ng":
            if len(result) >= 4:
                self.view.entry_N5_out.config(state='normal')
                self.view.entry_N6_out.config(state='normal')
                self.view.entry_N7_out.config(state='normal')
                self.view.entry_N8_out.config(state='normal')

                self.view.entry_N5_out.delete(0, tk.END)
                self.view.entry_N5_out.insert(0, result[0])
                self.view.entry_N6_out.delete(0, tk.END)
                self.view.entry_N6_out.insert(0, result[1])
                self.view.entry_N7_out.delete(0, tk.END)
                self.view.entry_N7_out.insert(0, result[2])
                self.view.entry_N8_out.delete(0, tk.END)
                self.view.entry_N8_out.insert(0, result[3])

                self.view.entry_N5_out.config(state='readonly')
                self.view.entry_N6_out.config(state='readonly')
                self.view.entry_N7_out.config(state='readonly')
                self.view.entry_N8_out.config(state='readonly')

        elif shape_type == "ƒê∆∞·ªùng tr√≤n":
            if len(result) >= 3:
                self.view.entry_duong_tron_B1.delete(0, tk.END)
                self.view.entry_duong_tron_B1.insert(0, result[0])
                self.view.entry_duong_tron_B2.delete(0, tk.END)
                self.view.entry_duong_tron_B2.insert(0, result[1])
                self.view.entry_duong_tron_B3.delete(0, tk.END)
                self.view.entry_duong_tron_B3.insert(0, result[2])

        elif shape_type == "M·∫∑t c·∫ßu":
            if len(result) >= 4:
                self.view.entry_mat_cau_B1.delete(0, tk.END)
                self.view.entry_mat_cau_B1.insert(0, result[0])
                self.view.entry_mat_cau_B2.delete(0, tk.END)
                self.view.entry_mat_cau_B2.insert(0, result[1])
                self.view.entry_mat_cau_B3.delete(0, tk.END)
                self.view.entry_mat_cau_B3.insert(0, result[2])
                self.view.entry_mat_cau_B4.delete(0, tk.END)
                self.view.entry_mat_cau_B4.insert(0, result[3])

    def _thuc_thi_import_excel_chunked(self):
        """X·ª≠ l√Ω file Excel l·ªõn v·ªõi chunk processing"""
        try:
            if not self.view.imported_file_path:
                messagebox.showerror("L·ªói", "Ch∆∞a import file Excel!")
                return

            # T·∫°o progress window
            progress_window = self._create_progress_window()

            # Bi·∫øn ƒë·ªÉ theo d√µi h·ªßy
            self._cancellation_requested = False

            def update_progress(progress, current, total, success, errors):
                """C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô l√™n GUI"""
                progress_window.progress_var.set(progress)
                progress_window.status_label.config(
                    text=f"ƒêang x·ª≠ l√Ω: {current}/{total} d√≤ng | Th√†nh c√¥ng: {success} | L·ªói: {errors}"
                )
                progress_window.update()

            def cancel_processing():
                """X·ª≠ l√Ω h·ªßy b·ªè"""
                self._cancellation_requested = True
                progress_window.destroy()

            # G·ªçi controller x·ª≠ l√Ω v·ªõi chunk
            results, output_file, success_count, error_count = self.controller.process_excel_batch_chunked(
                self.view.imported_file_path,
                self.view.dropdown1_var.get(),
                self.view.dropdown2_var.get() if self.view.pheptoan_var.get() not in ["Di·ªán t√≠ch", "Th·ªÉ t√≠ch"] else None,
                self.view.pheptoan_var.get(),
                self.view.kich_thuoc_A_var.get(),
                self.view.kich_thuoc_B_var.get(),
                chunksize=500,  # C√≥ th·ªÉ ƒëi·ªÅu ch·ªânh
                progress_callback=update_progress
            )

            progress_window.destroy()

            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            if self._cancellation_requested:
                self.view.update_final_result_display("ƒê√£ h·ªßy x·ª≠ l√Ω gi·ªØa ch·ª´ng")
                messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ h·ªßy x·ª≠ l√Ω file Excel")
            else:
                result_text = f"Ho√†n th√†nh: {success_count} d√≤ng th√†nh c√¥ng, {error_count} d√≤ng l·ªói"
                self.view.update_final_result_display(result_text)

                if error_count == 0:
                    messagebox.showinfo("Th√†nh c√¥ng",
                                        f"ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng {success_count} d√≤ng!\nFile: {os.path.basename(output_file)}")
                else:
                    messagebox.showwarning("Ho√†n th√†nh v·ªõi l·ªói",
                                           f"ƒê√£ x·ª≠ l√Ω {success_count} d√≤ng th√†nh c√¥ng, {error_count} d√≤ng l·ªói!\nFile: {os.path.basename(output_file)}")

        except Exception as e:
            error_msg = f"‚ùå L·ªói x·ª≠ l√Ω file Excel: {str(e)}"
            self.view.update_final_result_display(error_msg)
            messagebox.showerror("L·ªói x·ª≠ l√Ω", f"Kh√¥ng th·ªÉ x·ª≠ l√Ω file Excel:\n{str(e)}")

    def _create_progress_window(self):
        """T·∫°o c·ª≠a s·ªï hi·ªÉn th·ªã ti·∫øn ƒë·ªô"""
        progress_window = tk.Toplevel(self.view.window)
        progress_window.title("ƒêang x·ª≠ l√Ω...")
        progress_window.geometry("400x150")
        progress_window.transient(self.view.window)
        progress_window.grab_set()

        # Progress bar
        tk.Label(progress_window, text="ƒêang x·ª≠ l√Ω file Excel...", font=("Arial", 12)).pack(pady=10)

        progress_window.progress_var = tk.DoubleVar()
        progress_bar = ttk.Progressbar(progress_window, variable=progress_window.progress_var, maximum=100)
        progress_bar.pack(fill=tk.X, padx=20, pady=5)

        # Status label
        progress_window.status_label = tk.Label(progress_window, text="ƒêang kh·ªüi t·∫°o...")
        progress_window.status_label.pack(pady=5)

        # Cancel button
        tk.Button(progress_window, text="H·ªßy", command=lambda: self._cancel_processing(progress_window),
                  bg="#F44336", fg="white").pack(pady=10)

        return progress_window

    def _cancel_processing(self, progress_window):
        """X·ª≠ l√Ω s·ª± ki·ªán h·ªßy"""
        self._cancellation_requested = True
        progress_window.destroy()