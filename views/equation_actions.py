# services/equation_actions.py
import tkinter as tk
from tkinter import messagebox, filedialog
import os
from datetime import datetime

from processors.excel_processor import ExcelProcessor

# IMPORT T·ª™ TH∆Ø M·ª§C equation_services
from .equation import (
    EquationSolverService,
    BatchProcessingService,
    FileImportExportService,
    DataValidationService,
    EquationEncodingService
)


class EquationActions:
    def __init__(self, view, controller):
        self.view = view
        self.controller = controller
        self.excel_processor = ExcelProcessor()

        # Kh·ªüi t·∫°o c√°c service t·ª´ equation_services
        self.solver = EquationSolverService()
        self.batch_processor = BatchProcessingService(controller, self.excel_processor)
        self.file_service = FileImportExportService(self.excel_processor)
        self.validation_service = DataValidationService()
        self.encoding_service = EquationEncodingService(controller)

        # Bi·∫øn l∆∞u tr·ªØ file import
        self.imported_file_path = None
        self.imported_file_info = None

    def _xu_ly_du_lieu(self):
        """X·ª≠ l√Ω d·ªØ li·ªáu - t·ª± ƒë·ªông ph√°t hi·ªán ch·∫ø ƒë·ªô"""
        try:
            if self.imported_file_path and os.path.exists(self.imported_file_path):
                self._xu_ly_file_import()
            else:
                self._xu_ly_thu_cong()
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}")
            self._update_ui_error_state(str(e))

    def _xu_ly_thu_cong(self):
        """X·ª≠ l√Ω m√£ h√≥a d·ªØ li·ªáu th·ªß c√¥ng"""
        try:
            so_an = int(self.view.so_an_var.get())

            # Validate d·ªØ li·ªáu th·ªß c√¥ng
            validation_result = self.validation_service.validate_manual_input(
                self.view.input_entries, so_an
            )

            if validation_result['all_empty']:
                self.view.status_label.config(text="Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ x·ª≠ l√Ω")
                self.view.update_ket_qua_nghiem("Ch∆∞a c√≥ d·ªØ li·ªáu")
                return

            # M√£ h√≥a d·ªØ li·ªáu
            encoding_result = self.encoding_service.encode_equation_data(
                validation_result['coefficients'],
                so_an,
                self.view.phien_ban_var.get()
            )

            if not encoding_result['success']:
                raise Exception(encoding_result['error'])

            # Gi·∫£i h·ªá ph∆∞∆°ng tr√¨nh
            ket_qua_nghiem = self.solver.solve_equation_system(
                validation_result['coefficients'], so_an
            )

            # C·∫≠p nh·∫≠t UI
            self._update_ui_with_results(
                encoding_result['encoded_coefficients'],
                ket_qua_nghiem,
                encoding_result['total_result'],
                validation_result['messages']
            )

        except Exception as e:
            raise Exception(f"L·ªói x·ª≠ l√Ω th·ªß c√¥ng: {str(e)}")

    def _xu_ly_file_import(self):
        """X·ª≠ l√Ω h√†ng lo·∫°t file Excel ƒë√£ import"""
        try:
            if not self.imported_file_path:
                messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y file import!")
                return

            so_an = int(self.view.so_an_var.get())
            file_name = os.path.basename(self.imported_file_path)

            self.view.status_label.config(text=f"‚è≥ ƒêang x·ª≠ l√Ω h√†ng lo·∫°t file: {file_name}...")
            self.view.window.update()

            # X·ª≠ l√Ω h√†ng lo·∫°t
            results = self.batch_processor.process_batch_file(
                self.imported_file_path,
                so_an,
                self.view.phien_ban_var.get()
            )

            if not results:
                messagebox.showerror("L·ªói", "Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ x·ª≠ l√Ω!")
                return

            # Xu·∫•t k·∫øt qu·∫£
            output_file = self.file_service.export_batch_results(
                self.imported_file_path, results, so_an
            )

            # Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ªïng quan
            self._display_batch_results(results, output_file)

            # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            success_count = sum(1 for r in results if r.get('trang_thai') == 'Th√†nh c√¥ng')
            error_count = sum(1 for r in results if r.get('trang_thai') == 'L·ªói')
            total_rows = len(results)

            messagebox.showinfo(
                "X·ª≠ l√Ω h√†ng lo·∫°t ho√†n t·∫•t",
                f"ƒê√£ x·ª≠ l√Ω {total_rows} d√≤ng d·ªØ li·ªáu:\n"
                f"- Th√†nh c√¥ng: {success_count} d√≤ng\n"
                f"- L·ªói: {error_count} d√≤ng\n\n"
                f"K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o file:\n{output_file}"
            )

        except Exception as e:
            error_msg = f"L·ªói x·ª≠ l√Ω h√†ng lo·∫°t: {str(e)}"
            messagebox.showerror("L·ªói", error_msg)
            self.view.status_label.config(text=f"‚ùå {error_msg}")

    def _import_excel(self):
        """Import t·ª´ Excel"""
        try:
            if self.validation_service.check_existing_data(self.view.input_entries)['has_data']:
                self._show_import_warning()
                return

            file_path = filedialog.askopenfilename(
                title="Ch·ªçn file Excel ƒë·ªÉ import",
                filetypes=[("Excel files", "*.xlsx *.xls"), ("All files", "*.*")]
            )

            if not file_path:
                self.view.status_label.config(text="‚ùå Kh√¥ng c√≥ file ƒë∆∞·ª£c ch·ªçn")
                return

            self.imported_file_path = file_path
            so_an = int(self.view.so_an_var.get())

            # Import file
            import_result = self.file_service.import_excel_file(file_path, so_an)

            if not import_result['success']:
                raise Exception(import_result['error'])

            self._handle_successful_import(import_result, file_path)

        except Exception as e:
            self._handle_import_error(e)

    # C√°c ph∆∞∆°ng th·ª©c h·ªó tr·ª£ UI
    def _update_ui_with_results(self, encoded_coefficients, ket_qua_nghiem, ket_qua_tong, adjustment_messages):
        """C·∫≠p nh·∫≠t UI v·ªõi k·∫øt qu·∫£ x·ª≠ l√Ω"""
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ m√£ h√≥a
        for i, entry in enumerate(self.view.result_entries):
            if i < len(encoded_coefficients):
                entry.config(state='normal')
                entry.delete(0, tk.END)
                entry.insert(0, encoded_coefficients[i])
                entry.config(state='readonly')

        # Hi·ªÉn th·ªã k·∫øt qu·∫£ nghi·ªám v√† t·ªïng
        self.view.update_ket_qua_nghiem(ket_qua_nghiem)
        self.view.entry_tong.delete(0, tk.END)
        self.view.entry_tong.insert(0, ket_qua_tong)

        # Th√¥ng b√°o tr·∫°ng th√°i
        status_message = "ƒê√£ x·ª≠ l√Ω m√£ h√≥a v√† t√≠nh nghi·ªám th√†nh c√¥ng"
        if adjustment_messages:
            status_message += f" ({', '.join(adjustment_messages)})"
        self.view.status_label.config(text=status_message)

    def _update_ui_error_state(self, error_message):
        """C·∫≠p nh·∫≠t UI khi c√≥ l·ªói"""
        self.view.entry_tong.delete(0, tk.END)
        self.view.entry_tong.insert(0, "‚ùå L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu")
        self.view.update_ket_qua_nghiem(f"‚ùå L·ªói: {error_message}")

    def _display_batch_results(self, results, output_file):
        """Hi·ªÉn th·ªã k·∫øt qu·∫£ x·ª≠ l√Ω h√†ng lo·∫°t"""
        success_count = sum(1 for r in results if r.get('trang_thai') == 'Th√†nh c√¥ng')
        error_count = sum(1 for r in results if r.get('trang_thai') == 'L·ªói')
        total_rows = len(results)

        self.view.entry_tong.delete(0, tk.END)
        self.view.entry_tong.insert(0,
                                    f"üìä ƒê√£ x·ª≠ l√Ω {success_count}/{total_rows} d√≤ng - File: {os.path.basename(output_file)}")

        self.view.update_ket_qua_nghiem(f"‚úÖ X·ª≠ l√Ω h√†ng lo·∫°t ho√†n t·∫•t: {success_count} th√†nh c√¥ng, {error_count} l·ªói")

        self.view.status_label.config(
            text=f"‚úÖ ƒê√£ x·ª≠ l√Ω h√†ng lo·∫°t: {success_count} th√†nh c√¥ng, {error_count} l·ªói - K·∫øt qu·∫£: {os.path.basename(output_file)}"
        )

    def _handle_successful_import(self, import_result, file_path):
        """X·ª≠ l√Ω import th√†nh c√¥ng"""
        file_info = import_result['file_info']
        quality_info = import_result['quality_info']
        file_name = os.path.basename(file_path)

        if not quality_info['valid']:
            warning_msg = f"File c√≥ v·∫•n ƒë·ªÅ: {len(quality_info['data_issues'])} d√≤ng l·ªói"
            messagebox.showwarning("C·∫£nh b√°o ch·∫•t l∆∞·ª£ng d·ªØ li·ªáu", warning_msg)

        total_rows = file_info['total_rows']
        valid_rows = quality_info['rows_with_data']

        self.view.entry_tong.delete(0, tk.END)
        self.view.entry_tong.insert(0, f"üìÅ {file_name} ({valid_rows}/{total_rows} d√≤ng c√≥ d·ªØ li·ªáu)")

        self.view.update_ket_qua_nghiem(f"üìä File: {file_name} - S·∫µn s√†ng x·ª≠ l√Ω h√†ng lo·∫°t")

        self.view.status_label.config(
            text=f"‚úÖ ƒê√£ import: {file_name} ({valid_rows}/{total_rows} d√≤ng c√≥ d·ªØ li·ªáu). Nh·∫•n 'X·ª≠ l√Ω' ƒë·ªÉ x·ª≠ l√Ω h√†ng lo·∫°t."
        )

        self.view.set_imported_mode(True)

    def _handle_import_error(self, error):
        """X·ª≠ l√Ω l·ªói import"""
        self.imported_file_path = None
        self.imported_file_info = None

        error_msg = f"Kh√¥ng th·ªÉ import file Excel: {str(error)}"
        messagebox.showerror("L·ªói", error_msg)
        self.view.status_label.config(text=f"‚ùå {error_msg}")

    def _show_import_warning(self):
        """Hi·ªÉn th·ªã c·∫£nh b√°o khi ƒë√£ c√≥ d·ªØ li·ªáu"""
        status = self.validation_service.check_existing_data(self.view.input_entries)

        warning_message = (
            f"‚ùå KH√îNG TH·ªÇ IMPORT\n\n"
            f"C√°c √¥ nh·∫≠p li·ªáu ƒë√£ c√≥ d·ªØ li·ªáu:\n"
            f"- S·ªë √¥ ƒë√£ ƒëi·ªÅn: {status['filled_count']}/{status['total_count']}\n"
            f"- S·ªë √¥ tr·ªëng: {status['empty_count']}/{status['total_count']}\n\n"
            f"Vui l√≤ng x√≥a d·ªØ li·ªáu hi·ªán t·∫°i tr∆∞·ªõc khi import.\n\n"
            f"B·∫°n c√≥ th·ªÉ:\n"
            f"1. Nh·∫•n 'Quay l·∫°i' ƒë·ªÉ x√≥a d·ªØ li·ªáu hi·ªán t·∫°i\n"
            f"2. Import file Excel kh√°c sau khi x√≥a d·ªØ li·ªáu"
        )

        messagebox.showwarning("C·∫£nh b√°o", warning_message)
        self.view.status_label.config(text="Kh√¥ng th·ªÉ import - ƒê√£ c√≥ d·ªØ li·ªáu trong √¥ nh·∫≠p")
        self.view.entry_tong.delete(0, tk.END)
        self.view.entry_tong.insert(0, "‚ùå Import th·∫•t b·∫°i: ƒê√£ c√≥ d·ªØ li·ªáu")

    def _import_excel_khac(self):
        """Import file Excel kh√°c"""
        try:
            self.imported_file_path = None
            self.imported_file_info = None
            self._import_excel()
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ import file Excel kh√°c: {str(e)}")

    def _quay_lai(self):
        """X·ª≠ l√Ω khi nh·∫•n n√∫t Quay l·∫°i"""
        try:
            if self.imported_file_path:
                result = messagebox.askyesno(
                    "X√°c nh·∫≠n",
                    "B·∫°n c√≥ ch·∫Øc mu·ªën quay l·∫°i tr·∫°ng th√°i nh·∫≠p li·ªáu th·ªß c√¥ng?\nFile import hi·ªán t·∫°i s·∫Ω b·ªã h·ªßy."
                )
                if not result:
                    return

            self.imported_file_path = None
            self.imported_file_info = None

            self.view.entry_tong.delete(0, tk.END)
            self.view.entry_tong.insert(0, "Ch∆∞a c√≥ k·∫øt qu·∫£ t·ªïng")
            self.view.update_ket_qua_nghiem("Ch∆∞a c√≥ k·∫øt qu·∫£ nghi·ªám")

            self.view.set_imported_mode(False)
            self.view.clear_all_input_fields()

            self.view.status_label.config(text="üü¢ ƒê√£ quay l·∫°i tr·∫°ng th√°i nh·∫≠p li·ªáu th·ªß c√¥ng")

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ quay l·∫°i: {str(e)}")